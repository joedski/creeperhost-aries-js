// Generated by CoffeeScript 1.7.1

/*
A sort of straight port of the Aries PHP class.
 */
var Aries, https, urlencode;

https = require('https');

urlencode = require('../phpjs/urlencode');


/*
The cURL request had the following options:
- CURLOPT_URL = (the url)
- CURLOPT_SSL_VERIFYPEER = false
- CURLOPT_SSL_VERIFYHOST = false
- CURLOPT_POST = 1+
- CURLOPT_RETURNTRANSFER = true
    - This is not nodey, so we ignore this in favor of asyncish ways.  Listen for the 'response' event on the ClientRequest this method call returns.
- CURLOPT_POSTFIELDS = fieldsString
 */

module.exports = Aries = (function() {
  Aries.ERROR_HTTP = 'ERROR_HTTP';

  Aries.ERROR_API = 'ERROR_API';

  Aries.prototype.key = null;

  Aries.prototype.secret = null;

  Aries.wrapCommonErrors = function(callback) {
    return function(error, responseData, response, rawResponseData) {
      var _ref;
      if (error != null) {
        return callback(error);
      } else if (!((200 <= (_ref = Number(response.statusCode)) && _ref < 400))) {
        error = new Error("Received non-OK statusCode " + response.statusCode);
        error.apiErrorType = Aries.ERROR_HTTP;
        error.apiResponse = response;
        error.apiResponseStatusCode = Number(response.statusCode);
        return callback(error, responseData, response, rawResponseData);
      } else if (responseData.status !== 'success') {
        error = new Error("API call to '" + response.ariesMeta.service + "/" + response.ariesMeta.command + "' returned non-success status: " + responseData.message);
        error.apiErrorType = Aries.ERROR_API;
        error.apiResponseData = responseData;
        error.apiResponseStatus = responseData.status;
        error.apiResponseMessage = responseData.message;
        error.apiResponseCode = responseData.code;
        return callback(error, responseData, response, rawResponseData);
      } else {
        return callback(null, responseData, response, rawResponseData);
      }
    };
  };

  function Aries(key, secret) {
    this.key = key;
    this.secret = secret;
  }

  Aries.prototype.exec = function(service, command, data, callback) {
    var postData, request, requestOptions;
    if (data == null) {
      data = {};
    }
    if (callback == null) {
      callback = null;
    }
    if (typeof data === 'function') {
      callback = data;
      data = {};
    }
    callback = callback || function() {};
    postData = this.getPostData(data);
    requestOptions = this.getPostRequestOptions(service, command, postData);
    request = https.request(requestOptions);
    request.write(postData);
    request.end();
    request.on('error', function(error) {
      return callback(error);
    });
    return request.on('response', (function(_this) {
      return function() {
        var rawResponseData;
        rawResponseData = '';
        return function(response) {
          response.ariesMeta = {
            service: service,
            command: command,
            data: data,
            key: _this.key,
            secret: _this.secret
          };
          response.setEncoding('utf8');
          response.on('data', function(data) {
            return rawResponseData += data;
          });
          return response.on('end', function() {
            var e, responseData;
            responseData = rawResponseData != null ? ((function() {
              try {
                return JSON.parse(rawResponseData);
              } catch (_error) {
                e = _error;
                return null;
              }
            })()) : null;
            return callback(null, responseData, response, rawResponseData);
          });
        };
      };
    })(this)());
  };

  Aries.prototype.getPostData = function(data) {
    var fields, name, value;
    fields = {
      key: this.key,
      secret: this.secret
    };
    if (data != null) {
      fields.data = JSON.stringify(data);
    }
    return ((function() {
      var _results;
      _results = [];
      for (name in fields) {
        value = fields[name];
        _results.push("" + name + "=" + (urlencode(value)));
      }
      return _results;
    })()).join('&');
  };

  Aries.prototype.getPostRequestOptions = function(service, command, postData) {
    return {
      method: 'POST',
      hostname: "api.creeperhost.net",
      path: '/' + [service, command].join('/'),
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': Buffer.byteLength(postData, 'utf8')
      },
      rejectUnauthorized: false
    };
  };

  return Aries;

})();
